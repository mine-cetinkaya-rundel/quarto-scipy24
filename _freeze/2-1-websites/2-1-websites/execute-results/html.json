{
  "hash": "0ec3cf754e9eec6439096a9de2270842",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Websites and blogs\"\nsubtitle: \"Unlocking Dynamic Reproducible Documents<br>A Quarto Tutorial for Scientific Communication\"\nauthor: \"Mine Ã‡etinkaya Rundel\"\ninstitute: \"Duke University + Posit PBC\"\nfooter: \"ðŸ”— [bit.ly/quarto-scipy24](https://bit.ly/quarto-scipy24)\"\nformat:\n  revealjs:\n    output-file: 2-1-websites-reveal.html\n    transition: fade\n    slide-number: true\n    chalkboard: true\n    logo: ../images/quarto-icon.svg\n    theme: ../style/slides.scss\nfilters: \n  - countdown\nexecute:\n  freeze: auto\n  echo: true\n---\n\n\n# Anatomy of a Quarto project\n\n## Quarto projects\n\n-   Quarto projects have a `_quarto.yml` file\n\n-   The `type` field in this file indicates the type of project:\n\n    -   `default`: Collection of documents\n\n    -   `website`: Websites (and blogs)\n\n    -   `books`: Books\n\n    -   `manuscript`: Journal manuscript with embedded computing and JATS bundle\n\n## Components\n\n::: r-fit-text\n> [A Quarto Project is a directory]{.fragment} [that contains a file called `_quarto.yml`.]{.fragment}\n:::\n\n\\\n\n::::: columns\n::: {.column .fragment .fade-right width=\"50%\"}\nThis is a Quarto Project.\n\n```         \nmy-folder/\nâ”œâ”€â”€ _quarto.yml\nâ”œâ”€â”€ my-document.ipynb\n```\n:::\n\n::: {.column .fragment .fade-left width=\"50%\"}\nThis is not.\n\n```         \nmy-folder/\nâ”œâ”€â”€ my-document.ipynb\n```\n:::\n:::::\n\n## \\_quarto.yml {auto-animate=\"true\"}\n\nA YAML file with particular keys and values that Quarto recognizes. Unrecognized keys are ignored.\n\n``` {.yaml .fragment filename=\"_quarto.yml\"}\nproject:\n  title: \"A Barebones Project\"\n```\n\n## \\_quarto.yml {auto-animate=\"true\"}\n\nA YAML file with particular keys and values that Quarto recognizes. Unrecognized keys are ignored.\n\n``` {.yaml filename=\"_quarto.yml\" code-line-numbers=\"1-20|528-548\"}\nTO DO: ADD LONG YAML\n```\n\n## Quarto websites\n\n::: incremental\n-   Websites are essentially `format: html` + a Quarto Project file\n\n-   But a website is different than `format: html` in that it has multiple pages\n\n-   Websites and books are very similar in that they associate multiple pages/resources into a connected resource\n\n    -   In books, you can cross-reference between pages (chapters), but (currently), you can't cross-reference between pages in websites\n:::\n\n\n## Our turn\n\n::: our-turn\nLet's build a website that features the notebook we worked on and highlight the following features of Quarto websites:\n\n-   Add a `_quarto.yml`\n-   Create a landing page: `index.qmd`\n-   Explore navigation options: `navbar`, `sidebar`\n-   Apply themes, including a light and dark theme toggle\n-   Publish to GitHub Pages with `quarto publish`\n-   An aspect of the workshop webpage that you fancy?\n:::\n\n## Your turn\n\n::: task\n-   Add one more notebook that has at least one executable code cell and add it to the navigation list in `_quarto.yml` and render your site.\n    -   Not inspired to generate content? Feel free to copy the contents of <https://github.com/mine-cetinkaya-rundel/quarto-pydata-website-completed/blob/main/posts/islands-species.ipynb>.\n-   Add an [about page](https://quarto.org/docs/websites/website-about.html), `about.qmd`, personalize it, and add it to the navigation list in `_quarto.yml` and render your site.\n-   Re-publish on GitHub pages with `quarto publish`.\n:::\n\n\n{{< countdown minutes=10 >}}\n\n\n# Listings\n\n## Listings\n\n-   Listings enable you to automatically generate the contents of a page (or region of a page) from a list of Quarto documents or other custom data\n\n-   Useful for creating blogs, providing navigation for large numbers of documents, or any other scenario where youâ€™d like the contents of a page to be automatically updated as documents are added, updated, and removed\n\n## Blogs\n\n::: demo\nLet's now add a blog component to our website:\n\n-   Move your two notebook files into a new a folder called `posts`.\n-   Collect these notebooks in a new blog page using the [listings feature](https://quarto.org/docs/websites/website-listings.html).\n    -   Don't forget to make corresponding changes in your `_quarto.yml` file.\n:::\n\n## Customizing your blog\n\n::: task\nExperiment with the style of listings and choose one you like.\n:::\n\n\n{{< countdown minutes=5 >}}\n\n\n# Computations\n\n## When should code be re-run? {.smaller}\n\n::: incremental\n-   You might have a reason to re-run all code in a Quarto website (every single cell in every single document) every time you render the website.\n\n-   But, chances are, that's not what you want.\n\n    -   Just playing around styling -- you probably don't want to run the code again\n\n    -   Changed some code in a document -- you probably want to re-run the code in that document, but not necessarily others\n\n    -   Made a big change affecting computations on many or all pages -- you probably want to re-run all code\n\n-   `freeze` and `cache` options give you fine control over these decisions\n:::\n\n## Freeze {.smaller}\n\n-   The `freeze` option controls when/if computational documents be re-rendered during a global project render:\n\n``` yaml\nexecute:\n  freeze: true  # never re-render during project render\n```\n\n``` yaml\nexecute:\n  freeze: auto  # re-render only when source changes\n```\n\n``` yaml\nexecute:\n  freeze: false  # always re-render\n```\n\n-   The `freeze` option is typically added to a `_metadata.yml` file within a specific directory, affecting all files in that directory.\n\n-   For blogs, set `feeze` in `_metadata.yml` at the root of the `posts` directory.\n\n-   You can have it only within specific subdirectories for more complex sites.\n\n## Freeze and Jupyter notebooks\n\n-   When rendering an `.ipynb`, Quarto will not execute the cells within the notebook by default, assuming that you have already executed them while editing the notebook\n\n-   To execute the cells, pass the `--execute` flag to render:\n\n``` {.bash filename=\"Terminal\"}\nquarto render notebook.ipynb --execute\n```\n\n-   Or specify this behavior within the notebookâ€™s YAML front matter:\n\n``` yaml\n---\nexecute:\n  enabled: true\n---\n```\n\n## Cache\n\n-   Cache stores the results of computations for a specific file\n\n-   Cache invalidation is triggered by changes in chunk source code (or other cache attributes you've defined)\n\n-   `cache` can also be set at the chunk level, particularly useful for computationally expensive chunks\n\n## Freeze vs. cache {.smaller}\n\n-   Freeze option is typically set\n\n    -   for the whole website in `_quarto.yml`, or\n\n    -   for files within a directory in `_metadata.yml` in that directory\n\n``` yaml\nexecute: \n  freeze: auto\n```\n\n-   Cache option is typically set for a given file or for individual chunk(s) in a file.\n\n``` yaml\nexecute:\n  cache: true\n```\n\nor\n\n::: {#ef42f9bb .cell cache='true' execution_count=1}\n```` { .cell-code}\n```{{python}}\n1 + 1\n```\n\n````\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n2\n```\n:::\n:::\n\n\n## Freezing\n\n::: our-turn\nAdd a `_metadata.yml` file to the `posts` directory of your website and update the YAML front matter of your blog posts to execute the cells when `quarto render`ing.\n:::\n\n## Your turn\n\n::: your-turn\nPick up where we left off and\n\n-   Add an [about page](https://quarto.org/docs/websites/website-about.html).\n-   Add a folder called `posts` and create a few minimal blog post entries. Then, using the [listings feature](https://quarto.org/docs/websites/website-listings.html), create a blog page for your website.\n:::\n\n\n{{< countdown minutes=10 >}}\n\n\n# Wrap up\n\n## Freeze {.smaller}\n\n-   The `freeze` option controls when/if computational documents be re-rendered during a global project render:\n\n``` yaml\nexecute:\n  freeze: true  # never re-render during project render\n```\n\n``` yaml\nexecute:\n  freeze: auto  # re-render only when source changes\n```\n\n``` yaml\nexecute:\n  freeze: false  # always re-render\n```\n\n-   The `freeze` option is typically added to a `_metadata.yml` file within a specific directory, affecting all files in that directory.\n\n-   For blogs, set `feeze` in `_metadata.yml` at the root of the `posts` directory.\n\n-   You can have it only within specific subdirectories for more complex sites.\n\n## Freeze vs. cache\n\n-   Cache stores the results of computations for a specific file.\n\n-   Cache invalidation is triggered by changes in chunk source code (or other cache attributes you've defined).\n\n-   `cache` can also be set at the chunk level. Consider using the cache for computationally expensive chunks.\n\n## Publishing\n\nSee <https://quarto.org/docs/publishing> for publishing options other than Quarto Pub.\n\n## Links for reviewing tutorial materials\n\n-   Slides: <https://bit.ly/quarto-pydata>\n    -   If you're interested, source code for slides: <https://github.com/mine-cetinkaya-rundel/quarto-pydata-slides>\n-   Starter repo: <https://github.com/mine-cetinkaya-rundel/quarto-pydata-website>\n-   Complete repo: <https://github.com/mine-cetinkaya-rundel/quarto-pydata-website-completed>\n    -   Published website: <https://mine-cetinkaya-rundel.github.io/quarto-pydata-website-completed>\n\n# Wrap up\n\n## Learn more\n\n::: {.center-align .large}\n[quarto.org/docs/websites](https://quarto.org/docs/websites/>)\n:::\n\n\n```{=html}\n<iframe src=\"https://quarto.org/docs/websites\" width=\"100%\" height=\"500\" style=\"border:2px solid #123233;\" title=\"Quarto Websites\"></iframe>\n```\n\n\n## Questions\n\n::: your-turn\nAny questions / anything you'd like to review before we wrap up this module?\n:::\n\n",
    "supporting": [
      "2-1-websites_files"
    ],
    "filters": [],
    "includes": {}
  }
}