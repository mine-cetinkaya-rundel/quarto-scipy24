{
  "hash": "0322e8fbd7336c9596966b73a34668bf",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Hello, Quarto!\"\nsubtitle: \"SciPy 2024: Unlocking Dynamic Reproducible Documents<br>A Quarto Tutorial for Scientific Communication\"\nauthor: \"Mine Ã‡etinkaya Rundel\"\ninstitute: \"Duke University + Posit PBC\"\nfooter: \"ðŸ”— [bit.ly/quarto-scipy24](https://bit.ly/quarto-scipy24)\"\nformat:\n  revealjs:\n    output-file: 1-1-hello-reveal.html\n    transition: fade\n    slide-number: true\n    chalkboard: true\n    logo: ../images/quarto-scipy24-slide-logo.png\n    theme: ../style/slides.scss\nfilters: \n  - countdown\n---\n\n\n# Pre-workshop\n\n## Setup {.smaller}\n\n::: your-turn\n\n**1. Software:** Download and install Python and Quarto:\n\n-   Python 3: <https://www.python.org/downloads/>\n-   Quarto 1.5.53: <https://quarto.org/docs/get-started/>\n\n**2. Tools:** Dowload and install VS Code and Jupyter and Quarto extensions.\n\n-   VS Code: <https://code.visualstudio.com/>\n-   Quarto Extension: <https://marketplace.visualstudio.com/items?itemName=quarto.quarto>\n-   Jupyter Extension: <https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter>\n\n**3. Exercises:** Go to [`bit.ly/quarto-scipy24-exercises`](https://bit.ly/quarto-scipy24-exercises), click on \"Use this template\" then \"Create a new repository\". Click on the green *Code* button and copy the URL of the repo.\n\n**4. Packages:** Open VS Code. Under *Start*, click on *Clone Git Repository*, and paste the URL of the repo. Open the cloned project. In the Command Palette, go to `Python: Create Environment...` and choose `Venv`, then choose the (latest) Python version you have installed. Check the box for `requirements.txt` in the \"Select dependencies to install\" menu and hit OK.\n\n\n:::\n\n# Welcome\n\n## Code of Conduct {.smaller}\n\nAttendees at SciPy 2024 are subject to the NumFOCUS Code of Conduct.\n\nBe kind to others. Do not insult or put down others. Behave professionally. Remember that harassment and sexist, racist, or exclusionary jokes are not appropriate for NumFOCUS.\n\nAll communication should be appropriate for a professional audience including people of many different backgrounds. Sexual language and imagery is not appropriate.\n\nNumFOCUS is dedicated to providing a harassment-free community for everyone, regardless of gender, sexual orientation, gender identity and expression, disability, physical appearance, body size, race, or religion. We do not tolerate harassment of community members in any form.\n\nThank you for helping make this a welcoming, friendly community for all.\n\n::: aside\n[For more info and reporting a code of conduct incident](https://www.scipy2024.scipy.org/#Code-of-Conduct)\n:::\n\n## About me\n\n::::: columns\n::: {.column width=\"50%\"}\n-   Professor of the Practice\\\n    Department of Statistical Science\\\n    Duke University\n\n-   Developer Educator, Posit PBC\n:::\n\n::: {.column width=\"50%\" style=\"text-align: center;\"}\n![](images/mine.png){fig-alt=\"Mine's headshot\" fig-align=\"center\"}\n\n**Mine Ã‡etinkaya-Rundel**\n\n[mine-cr.com](https://mine-cr.com)\n:::\n:::::\n\n-   Teaching data analysis in computational notebooks for 10+ years\n-   Teaching and using Quarto for 3+ years\n\n## About you\n\n::: your-turn\nPlease share with the person next to you...\n\n-   Your name\n-   Your professional affiliation\n-   What you hope to get out of this tutorial\n:::\n\n\n{{< countdown minutes=3 >}}\n\n\n## Meeting you where you are\n\n::::::: columns\n:::: {.column width=\"50%\"}\n::: {.fragment .fade-in-then-semi-out}\nThese materials are pitched at someone who:\n\n-   knows some Python + Markdown\n\n-   has worked in VS Code and/or Jupyter Lab\n\n-   wants to learn about Quarto\n:::\n::::\n\n:::: {.column width=\"50%\"}\n::: {.fragment .fade-in}\nI'll teach you\n\n-   More Markdown\n\n-   New Quarto formats\n\n-   New Quarto projects\n:::\n::::\n:::::::\n\n## Workshop structure\n\n:::::::: columns\n::: {.column .fragment width=\"33%\"}\n**My turn**\n\n-   Lecture segments\n-   Feel free to just watch, take notes, browse docs, or tinker around with the code\n:::\n\n:::: {.column .fragment width=\"33%\"}\n::: our-turn\n**Our turn**\n\n-   Lecture segments + live coding\n-   (Optionally) follow along with live coding\n:::\n::::\n\n:::: {.column .fragment width=\"33%\"}\n::: your-turn\n**Your turn**\n\n-   Practice exercises for you\n-   Work on your own or with the person next to you\n:::\n::::\n::::::::\n\n## Getting help\n\n-   During **my turn** and **your turn** segments -- raise your hand\n\n-   During **our turn** segments -- also feel free to raise your hand for questions but if your question seems specific to your setup, I might come around and help during the next your turn break\n\n## Setup {.smaller}\n\n::: your-turn\n\n**1. Software:** Download and install Python and Quarto:\n\n-   Python 3: <https://www.python.org/downloads/>\n-   Quarto 1.5.53: <https://quarto.org/docs/get-started/>\n\n**2. Tools:** Dowload and install VS Code and Jupyter and Quarto extensions.\n\n-   VS Code: <https://code.visualstudio.com/>\n-   Quarto Extension: <https://marketplace.visualstudio.com/items?itemName=quarto.quarto>\n-   Jupyter Extension: <https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter>\n\n**3. Exercises:** Go to [`bit.ly/quarto-scipy24-exercises`](https://bit.ly/quarto-scipy24-exercises), click on \"Use this template\" then \"Create a new repository\". Click on the green *Code* button and copy the URL of the repo.\n\n**4. Packages:** Open VS Code. Under *Start*, click on *Clone Git Repository*, and paste the URL of the repo. Open the cloned project. In the Command Palette, go to `Python: Create Environment...` and choose `Venv`, then choose the (latest) Python version you have installed. Check the box for `requirements.txt` in the \"Select dependencies to install\" menu and hit OK.\n\n\n:::\n\n. . .\n\n::: {.hand-blue-large style=\"text-align: center;\"}\nLet's get started!\n:::\n\n# What is Quarto?\n\n## Quarto ...\n\nis an innovative, open-source scientific and technical publishing system compatible with Jupyter notebooks and all your favorite plain text markdown editors\n\n![Artwork from \"Hello, Quarto\" keynote by Julia Lowndes and Mine Ã‡etinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst.](images/horst-quarto-schematic.png){fig-alt=\"A schematic representing the multi-language input (e.g. Python, R, Observable, Julia) and multi-format output (e.g. PDF, html, Word documents, and more) versatility of Quarto.\" fig-align=\"center\"}\n\n## With Quarto ...\n\nyou can **weave** together **narrative** and **code** to produce elegantly formatted output as documents, web pages, blog posts, books and more, with...\n\n::: incremental\n-   **consistent** implementation of attractive and handy features across outputs: tabsets, code-folding, syntax highlighting, etc.\n-   defaults that meet accessibility guidelines as well as features that enable good practices for producing **accessible** documents\n-   native **multi-lingual** support for multiple languages like Python, R, Julia, Observable, and more via the Jupyter engine for executable code chunks\n:::\n\n## A tour of Quarto {.smaller}\n\n::: {.hand-blue-large style=\"text-align: center;\"}\nSit back and enjoy! ... or follow along with `hello-penguins.qmd`.\n:::\n\n::: our-turn\n-   Running individual cells\n-   Rendering a document\n-   Editing with source editor and visual editor\n-   Inserting images and lightbox effect\n-   Inserting tables\n-   Customizing formats: `pdf`, `docx`, `revealjs`\n-   Customizing format options:  `code-fold`, `toc`\n-   Code cells: labels, alt-text, execution options (`echo`, `warning`)\n-   Cross referencing figures and tables, with and without the visual editor\n-   Converting between Jupyter Notebooks and plain text markdown documents\n:::\n\n# How it works\n\n## Revisit: What is Quarto? {.smaller}\n\nQuarto is a command line interface (**CLI**) that renders plain text formats (`.qmd`, `.rmd`, `.md`) OR mixed formats (`.ipynb`/Jupyter notebook) into static PDF/Word/HTML reports, books, websites, presentations and more.\n\n. . .\n\n::: {#f4e55e07 .cell execution_count=1}\n``` {.python .cell-code code-line-numbers=\"|1|2|10|15|16\"}\nUsage:   quarto\nVersion: 1.5.53\n\nDescription:\n\n  Quarto CLI\n\nOptions:\n\n  -h, --help     - Show this help.                            \n  -V, --version  - Show the version number for this program.  \n\nCommands:\n\n  render     [input] [args...]     - Render files or projects to various document types.\n  preview    [file] [args...]      - Render and preview a document or website project.  \n  serve      [input]               - Serve a Shiny interactive document.                \n  create     [type] [commands...]  - Create a Quarto project or extension               \n  use        <type> [target]       - Automate document or project setup tasks.          \n  add        <extension>           - Add an extension to this folder or project         \n  update     [target...]           - Updates an extension or global dependency.         \n  remove     [target...]           - Removes an extension.                              \n  convert    <input>               - Convert documents to alternate representations.    \n  pandoc     [args...]             - Run the version of Pandoc embedded within Quarto.  \n  typst      [args...]             - Run the version of Typst embedded within Quarto.   \n  run        [script] [args...]    - Run a TypeScript, R, Python, or Lua script.        \n  install    [target...]           - Installs a global dependency (TinyTex or Chromium).\n  uninstall  [tool]                - Removes an extension.                              \n  tools                            - Display the status of Quarto installed dependencies\n  publish    [provider] [path]     - Publish a document or project to a provider.       \n  check      [target]              - Verify correct functioning of Quarto installation. \n  help       [command]             - Show this help or the help of a sub-command.\n```\n:::\n\n\n## Under the hood\n\n![](images/ipynb-how-it-works.png){fig-align=\"center\"}\n\n::: incremental\n-   `jupyter` evaluates Python code and returns a `.md` file along with the evaluated code\n-   Quarto applies Lua filters + CSS/LaTeX which is then evaluated alongside the `.md` file by Pandoc and converted to a final output format\n:::\n\n## Under the hood\n\nwith a wider lens...\n\n![](images/quarto-how-it-works.png){fig-align=\"center\"}\n\n::: incremental\n-   `jupyter` or `knitr` evaluates Python, Julia, R, or Observable code and returns a `.md` file along with the evaluated code\n-   Quarto applies Lua filters + CSS/LaTeX which is then evaluated alongside the `.md` file by Pandoc and converted to a final output format\n:::\n\n## Aside: Lua filters {.smaller}\n\n-   Here is an example of a Lua filter that converts strong emphasis to small caps, from <https://pandoc.org/lua-filters.html>:\n\n``` lua\nreturn {\n  {\n    Strong = function (elem)\n      return pandoc.SmallCaps(elem.c)\n    end,\n  }\n}\n```\n\n. . .\n\n-   Lua filters written by R/Python/Julia developers should be interchangeable between formats - not language specific!\n\n. . .\n\n-   We won't go into the details of writing Lua filters in this workshop, and you don't need to worry about learning about Lua filters unless you're working on extending Quarto.\n\n## From the comfort of your own ~~home~~workspace\n\n::: r-stack\n![](https://quarto.org/docs/tools/images/jupyterlab-preview.png){.fragment fig-alt=\"A screenshot of a Quarto document rendered inside JupyterLab\" height=\"600\"}\n\n![](https://quarto.org/docs/computations/images/python-vscode.png){.fragment fig-alt=\"A screenshot of a Quarto document rendered inside VSCode\" height=\"600\"}\n\n![](https://quarto.org/docs/tools/images/rstudio-preview.png){.fragment fig-alt=\"A screenshot of a Quarto document rendered inside RStudio\" height=\"600\"}\n\n![](images/positron.png){.fragment fig-alt=\"A screenshot of a Quarto document rendered inside Positron\" height=\"600\"}\n:::\n\n## Render and preview\n\n**in the Terminal** in VS Code or JupyterLab\n\nRender to output formats:\n\n\n```{bash}\n# ipynb notebook\nquarto render notebook.ipynb\nquarto render notebook.ipynb --to docx\n\n# plain text qmd\nquarto render notebook.qmd \nquarto render notebook.qmd --to pdf\n```\n\n\nLive preview server (re-render on save):\n\n\n```{bash}\n# ipynb notebook\nquarto preview notebook.ipynb\nquarto preview notebook.ipynb --to docx\n\n# plain text qmd\nquarto preview notebook.qmd \nquarto preview notebook.qmd --to pdf\n```\n\n\n## Render and preview\n\n**in the Editor** in VS Code\n\n-   Install and enable the Quarto extension\n\n-   Clicking on Preview or Cmd + Shift + K\n\n# Quarto formats\n\n## One install, \"Batteries included\"\n\n-   Quarto comes **\"batteries included\"** straight out of the box:\n\n    -   HTML reports and websites\n\n    -   PDF reports\n\n    -   MS Office (Word, Powerpoint)\n\n    -   Presentations (Powerpoint, Beamer, `revealjs`)\n\n    -   Books\n\n    -   Manuscripts\n\n    -   ...\n\n. . .\n\n-   Any language, *exact* same approach and syntax\n\n## Many Quarto formats {.smaller}\n\n| Feature | Quarto |\n|--------------------------|----------------------------------------------|\n| Basic Formats | [html](https://quarto.org/docs/output-formats/html-basics.html), [pdf](https://quarto.org/docs/output-formats/pdf-basics.html), [docx](https://quarto.org/docs/output-formats/ms-word.html), [typst](https://quarto.org/docs/output-formats/typst.html) |\n| Beamer | [beamer](https://quarto.org/docs/presentations/beamer.html) |\n| PowerPoint | [pptx](https://quarto.org/docs/presentations/powerpoint.html) |\n| HTML Slides | [revealjs](https://quarto.org/docs/presentations/revealjs/) |\n| Advanced Layout | [Quarto Article Layout](https://quarto.org/docs/authoring/article-layout.html) |\n| Cross References | [Quarto Crossrefs](https://quarto.org/docs/authoring/cross-references.html) |\n| Websites & Blogs | [Quarto Websites](https://quarto.org/docs/websites/), [Quarto Blogs](https://quarto.org/docs/websites/website-blog.html) |\n| Books | [Quarto Books](https://quarto.org/docs/books/) |\n| Interactivity | [Quarto Interactive Documents](https://quarto.org/docs/interactive/shiny/) |\n| Journal Articles | [Journal Articles](https://quarto.org/docs/journals/index.html) |\n| Dashboards | [Quarto Dashboards](https://quarto.org/docs/dashboards/) |\n\n: {tbl-colwidths=\"\\[25,75\\]\"}\n\n## Your turn\n\n::: your-turn\nIn VS Code, open the `hello-penquins.qmd` file. Render the document to HTML.\n\n-   Add an `author` field in the YAML and add your name.\n\n-   Add some text and style it with bold, italics, etc. using the source editor as well as the visual editor. \n\n-   Modify the figure to add units to the axis labels: **g**rams for body weight and **mm** (milimeters) for flipper length. Render or preview the document and make sure the changes are reflected in the HTML output.\n\n-   Change the html theme to `sketchy`. See <https://quarto.org/docs/output-formats/html-themes.html> for documentation on HTML theming.\n:::\n\n\n{{< countdown minutes=5 >}}\n\n\n# Wrap up\n\n## A pause\n\n::: your-turn\nWhere does the name \"Quarto\" come from?\n:::\n\n. . .\n\n<iframe src=\"https://en.wikipedia.org/wiki/Quarto\" title=\"Quarto on Wikipedia\" frameborder=\"1\" height=\"450\" width=\"900\">\n\n</iframe>\n\n::: aside\nSource: <https://en.wikipedia.org/wiki/Quarto>\n:::\n\n## Learn more\n\n::: {.center-align .large}\n[quarto.org/docs/guide](https://quarto.org/docs/guide/%3E) \\> Authoring & Computations\n:::\n\n<iframe src=\"https://quarto.org/docs/guide\" width=\"100%\" height=\"500\" style=\"border:2px solid #123233;\" title=\"Quarto Guide\"></iframe>\n\n## Questions\n\n::: your-turn\nAny questions / anything you'd like to review before we wrap up this module?\n:::\n\n",
    "supporting": [
      "1-1-hello_files/figure-revealjs"
    ],
    "filters": [],
    "includes": {}
  }
}