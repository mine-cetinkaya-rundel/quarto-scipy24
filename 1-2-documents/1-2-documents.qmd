---
title: "Documents"
subtitle: "Unlocking Dynamic Reproducible Documents<br>A Quarto Tutorial for Scientific Communication"
author: "Mine Ã‡etinkaya Rundel"
institute: "Duke University + Posit PBC"
footer: "ðŸ”— [bit.ly/quarto-scipy24](https://bit.ly/quarto-scipy24)"
format:
  revealjs:
    transition: fade
    slide-number: true
    chalkboard: true
    logo: images/quarto-icon.svg
    theme: ../style/slides.scss
filters: 
  - timer
execute:
  freeze: auto
  echo: true
---

# Anatomy of a Quarto document

## Components

1.  Metadata: YAML

2.  Text: Markdown

3.  Code: Executed via `knitr` or `jupyter`

. . .

**Weave it all together**, and you have beautiful, powerful, and useful outputs!

## Literate programming {.smaller}

Literate programming is writing out the program logic in a human language with included (separated by a primitive markup) code snippets and macros.

````         
---
title: "plotnine demo"
date: "7/8/2024"
format: html
---

## MPG

There is a relationship between city and highway mileage.

```{{python}}
#| label: fig-mpg
import plotnine as p9
from palmerpenguins import load_penguins

penguins = load_penguins()

(
    p9.ggplot(
        penguins, 
        p9.aes(x="flipper_length_mm", y="body_mass_g", color="species")
    )
    + p9.geom_point()
    + p9.stat_smooth(method="lm")
    + p9.scale_color_manual(values = ["#FF8C00","#159090","#A034F0"]) 
    + p9.theme_minimal()
    + p9.labs(
        x = "Flipper length (mm)", 
        y = "Body mass (g)", 
        color = "Species", 
        title = "Body mass vs. flipper length of Palmer Penguins"
    )
)
```
````

::: aside
Source: <https://en.wikipedia.org/wiki/Literate_programming>
:::

# Metadata

## YAML

"Yet Another Markup Language" or "YAML Ain't Markup Language" is used to provide document level metadata.

``` yaml
---
key: value
---
```

## Output options

``` yaml
---
format: something
---
```

. . .

<br>

``` yaml
---
format: html
---
```

``` yaml
---
format: pdf
---
```

``` yaml
---
format: revealjs
---
```

## Output option arguments

Indentation matters!

``` yaml
---
format: 
  html:
    toc: true
    code-fold: true
---
```

## YAML validation {.smaller}

-   Invalid: No space after `:`

``` yaml
---
format:html
---
```

-   Invalid: Read as missing

``` yaml
---
format:
html
---
```

-   Valid, but needs next object

``` yaml
---
format: 
  html:
---
```

## YAML validation {.smaller}

There are multiple ways of formatting valid YAML:

-   Valid: There's a space after `:`

``` yaml
format: html
```

-   Valid: There are 2 spaces a new line and no trailing `:`

``` yaml
format:
  html
```

-   Valid: `format: html` with selections made with proper indentation

``` yaml
format: 
  html:
    toc: true
```

## Why YAML?

To avoid manually typing out all the options, every time when rendering via the CLI:

. . .

``` bash
quarto render document.qmd --to html
```

<br>

. . .

``` bash
quarto render document.qmd --to html -M code-fold:true
```

<br>

. . .

``` bash
quarto render document.qmd --to html -M code-fold:true -P alpha:0.2 -P ratio:0.3
```

## Quarto linting

Lint, or a linter, is a static code analysis tool used to flag programming errors, bugs, stylistic errors and suspicious constructs.

<br>

::::: columns
::: {.column width="50%"}
![](images/lint-rstudio.png)
:::

::: {.column width="50%"}
![](images/lint-vscode.png)
:::
:::::

::: aside
Source: <https://en.wikipedia.org/wiki/Lint_(software)>
:::

## Quarto YAML Intelligence

RStudio + VSCode provide rich tab-completion - start a word and tab to complete, or <kbd>`Ctrl + space`</kbd> to see all available options.

<br>

![](images/quarto-tab-complete.png){fig-align="center" width="600"}

## Your turn

::: task
-   Open `hello-penguins.qmd` in RStudio.
-   Try <kbd>`Ctrl + space`</kbd> to see the available YAML options.
-   Try out the tab-completion of any options you remember.
-   You can use the [HTML reference](https://quarto.org/docs/reference/formats/html.html) as needed.
:::

::: {#UNIQUE-ID .timer seconds="180" starton="slide"}
:::

## List of valid YAML fields

-   Many YAML fields are common across various outputs

-   But also each output type has its own set of valid YAML fields and options

-   Definitive list: [quarto.org/docs/reference/formats/html](https://quarto.org/docs/reference/formats/html.html)

# Text

## Text Formatting

+-------------------------------+-------------------------------+
| Markdown Syntax               | Output                        |
+===============================+===============================+
| ```                           | *italics* and **bold**        |
| *italics* and **bold**        |                               |
| ```                           |                               |
+-------------------------------+-------------------------------+
| ```                           | superscript^2^ / subscript~2~ |
| superscript^2^ / subscript~2~ |                               |
| ```                           |                               |
+-------------------------------+-------------------------------+
| ```                           | ~~strikethrough~~             |
| ~~strikethrough~~             |                               |
| ```                           |                               |
+-------------------------------+-------------------------------+
| ```                           | `verbatim code`               |
| `verbatim code`               |                               |
| ```                           |                               |
+-------------------------------+-------------------------------+

: {tbl-colwidths="\[50,50\]"}

## Headings {.smaller}

+-----------------+-----------------+
| Markdown Syntax | Output          |
+=================+=================+
| ```             | # Header 1      |
| # Header 1      |                 |
| ```             |                 |
+-----------------+-----------------+
| ```             | ## Header 2     |
| ## Header 2     |                 |
| ```             |                 |
+-----------------+-----------------+
| ```             | ### Header 3    |
| ### Header 3    |                 |
| ```             |                 |
+-----------------+-----------------+
| ```             | #### Header 4   |
| #### Header 4   |                 |
| ```             |                 |
+-----------------+-----------------+
| ```             | ##### Header 5  |
| ##### Header 5  |                 |
| ```             |                 |
+-----------------+-----------------+
| ```             | ###### Header 6 |
| ###### Header 6 |                 |
| ```             |                 |
+-----------------+-----------------+

: {tbl-colwidths="\[50,50\]"}

## Links {.smaller}

There are several types of "links" or hyperlinks.

::::: columns
::: {.column width="60%"}
**Markdown**

``` markdown
You can embed [named hyperlinks](https://quarto.org/),
direct urls like <https://quarto.org/>, and links to 
[other places](#quarto-anatomy) in 
the document. The syntax is similar for embedding an
inline image: ![Penguins playing with ball](images/penguins-quarto-ball.png).
```
:::

::: {.column .fragment width="40%"}
**Output**

You can embed [named hyperlinks](https://quarto.org/), direct urls like <https://quarto.org/>, and links to [other places](#quarto-anatomy) in the document. The syntax is similar for embedding an inline image: ![Penguins playing with ball](images/penguins-quarto-ball.png){style="width:250px;"}.
:::
:::::

## Lists {.smaller}

Unordered list:

::::: columns
::: {.column width="50%"}
**Markdown:**

``` markdown
-   unordered list         
    -   sub-item 1         
    -   sub-item 1         
        -   sub-sub-item 1 
```
:::

::: {.column .fragment width="50%" fragment-index="1"}
**Output**

-   unordered list
    -   sub-item 1\
    -   sub-item 1
        -   sub-sub-item 1
:::
:::::

Ordered list:

::::: columns
::: {.column width="50%"}
**Markdown:**

``` markdown
1. ordered list            
2. item 2                  
    i. sub-item 1          
         A.  sub-sub-item 1
```
:::

::: {.column .fragment width="50%" fragment-index="2"}
**Output**

1.  ordered list\
2.  item 2
    i.  sub-item 1
        A.  sub-sub-item 1
:::
:::::

## Quotes

**Markdown:**

``` markdown
> Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do. 
> - Donald Knuth, Literate Programming
```

. . .

**Output:**

> Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do. - Donald Knuth, Literate Programming

::: aside
"Literate Programming", The Computer Journal 27 (1984), p. 97. (Reprinted in Literate Programming, 1992, p. 99.) Literate Programming (1984)
:::

## Divs and spans {.smaller}

Pandoc, and therefore Quarto, can parse ["fenced div blocks"](https://pandoc.org/MANUAL.html#divs-and-spans):

. . .

-   You can think of a `:::` **div** as a HTML `<div>` but it can also apply in specific situations to content in PDF:

``` markdown
::: {style="border-left:10px solid red"}
This content can be styled with a border
:::
```

::: {style="border-left:10px solid red"}
This content can be styled with a border
:::

. . .

-   `[text]{.class}` **span**s can be thought of a `<span .class>Text</span>` but again are a bit more transferable if using Pandoc/Quarto native attributes.

``` markdown
This is text with [special]{style="color:red;"} formatting.
```

This is text with [special]{style="color:red;"} formatting.

## Divs with pre-defined classes

These can often apply between formats:

``` markdown
::: {.unnumbered .unlisted}
Text
:::
```

## Your turn

::: task
-   Open `markdown-syntax.qmd` in RStudio.
-   Follow the instructions in the document, then exchange one new thing you've learned with your neighbor.
:::

::: {.timer seconds="300" starton="slide"}
:::

## Callouts

```         
::: callout-note
Note that there are five types of callouts, including: 
`note`, `tip`, `warning`, `caution`, and `important`.
:::
```

::: callout-note
Note that there are five types of callouts, including: `note`, `tip`, `warning`, `caution`, and `important`.
:::

## More callouts

::: callout-warning
Callouts provide a simple way to attract attention, for example, to this warning.
:::

::: callout-important
Danger, callouts will really improve your writing.
:::

::: callout-caution
Here is something under construction.
:::

::: callout-tip
## Caption

Tip with caption.
:::

## Your turn

::: task
-   Open `callout-boxes.qmd` and render the document.
-   Using the visual editor, change the type of the first callouts box and then re-render. Also play with the options to change its appearance.
-   Add a caption to the second callout box.
-   Make the third callout box collapsible. Then, switch over to the source editor to inspect the markdown code.
-   Change the format to PDF and re-render.
:::

::: {.timer seconds="180" starton="slide"}
:::

## Footnotes

Pandoc supports numbering and formatting footnotes.

## Inline footnotes

```         
Here is an inline note.^[Inlines notes are easier to write,
since you don't have to pick an identifier and move down to
type the note.]
```

Here is an inline note.[^1]

[^1]: Inlines notes are easier to write, since you don't have to pick an identifier and move down to type the note.

## Inline footnotes

```         
Here is an footnore reference[^1]

[^1]: This can be easy in some situations when you have a really long note or
don't want to inline complex outputs.
```

. . .

Here is an footnote reference[^2]

[^2]: This can be easy in some situations when you have a really long note or don't want to inline complex outputs.

. . .

Notice in both situations that the footnote is placed at the bottom of the page in presentations, whereas in a document it would be hoverable or at the end of the document.

# Code

## Anatomy of a code chunk

::::: columns
::: {.column width="50%"}
```{python}
#| label: penguins
#| message: false
#| echo: fenced

import pandas as pd
from palmerpenguins import load_penguins

penguins = load_penguins()

penguins["species"].unique()
```
:::

::: {.column .fragment width="50%"}
-   Has 3x backticks on each end
-   Engine (`python`) is indicated between curly braces `{python}`
-   Options stated with the `#|` (hashpipe): `#| option1: value`
:::
:::::

## Code, who is it for?

::: incremental
-   The way you display code is very different for different contexts.
-   In a teaching scenario like today, I *really* want to display code.
-   In a business, you may want to have a data-science facing output which displays the source code AND a stakeholder-facing output which hides the code.
:::

## Code

If you simply want code formatting but don't want to execute the code:

-   Option 1: Use 3x back ticks + the language ```` ```r ````

````         
```python
penguins.head()
```
````

. . .

-   Option 2: Add `eval: false` as chunk option

```{python}
#| eval: false
#| echo: fenced

penguins.head()
```

## Showing and hiding code with `echo`

-   The `echo` option shows the code when set to `true` and hides it when set to `false`.

-   If you want to both execute the code and return the full code including backticks (like in a teaching scenario) `echo: fenced` is your friend!

```{python}
#| echo: fenced

1 + 1
```

## Tables and figures

-   In reproducible reports and manuscripts, the most commonly included code outputs are **tables** and **figures**.

-   So they get their own special sections in our deep dive!

# Tables

## Markdown tables

**Markdown:**

``` markdown
| Right | Left | Default | Center |
|------:|:-----|---------|:------:|
|   12  |  12  |    12   |    12  |
|  123  |  123 |   123   |   123  |
|    1  |    1 |     1   |     1  |
```

. . .

**Output:**

| Right | Left | Default | Center |
|------:|:-----|---------|:------:|
|    12 | 12   | 12      |   12   |
|   123 | 123  | 123     |  123   |
|     1 | 1    | 1       |   1    |

## Grid tables

**Markdown:**

``` markdown
+---------------+---------------+--------------------+
| Fruit         | Price         | Advantages         |
+===============+===============+====================+
| Bananas       | $1.34         | - built-in wrapper |
|               |               | - bright color     |
+---------------+---------------+--------------------+
| Oranges       | $2.10         | - cures scurvy     |
|               |               | - tasty            |
+---------------+---------------+--------------------+

: Sample grid table.
```

## Grid tables

**Output:**

+---------------+---------------+----------------------+
| Fruit         | Price         | Advantages           |
+===============+===============+======================+
| Bananas       | \$1.34        | -   built-in wrapper |
|               |               | -   bright color     |
+---------------+---------------+----------------------+
| Oranges       | \$2.10        | -   cures scurvy     |
|               |               | -   tasty            |
+---------------+---------------+----------------------+

: Sample grid table.

## Grid tables: Alignment

-   Alignments can be specified as with pipe tables, by putting colons at the boundaries of the separator line after the header:

```         
+---------------+---------------+--------------------+
| Right         | Left          | Centered           |
+==============:+:==============+:==================:+
| Bananas       | $1.34         | built-in wrapper   |
+---------------+---------------+--------------------+
```

. . .

-   For headerless tables, the colons go on the top line instead:

```         
+--------------:+:--------------+:------------------:+
| Right         | Left          | Centered           |
+---------------+---------------+--------------------+
```

## Grid tables: Authoring

-   Note that grid tables are quite awkward to write with a plain text editor because unlike pipe tables, the column indicators must align.

-   The Visual Editor can assist in making these tables!

## Tables from code {.smaller}

If you are using pandas to work with your data, you can convert a pandas DataFrame to an HTML table using the `DataFrame.to_html()` method:

```{python}
penguins.to_html(index=False)
```

## Tables from code {.smaller}

If you want fancier tables, try the **great_tables** package and [all that it offers](https://posit-dev.github.io/great-tables/)!

```{python}
#| output-location: column-fragment

import great_tables as gt

(
    gt.GT(penguins.head())
    .tab_style(
        style = [
            gt.style.fill(color = "pink"),
            gt.style.text(weight = "italic")
        ],
        locations = gt.loc.body(
          columns= "bill_length_mm",
          rows = list(penguins[penguins["bill_length_mm"] > 40].index)
        )
    )
)
```

# Figures

## Markdown figures

```         
![Penguins playing with a Quarto ball](images/penguins-quarto-ball.png)
```

![Penguins playing with a Quarto ball](images/penguins-quarto-ball.png)

## Markdown figures with options

::::: columns
::: {.column width="50%"}
```         
![Penguins playing with a Quarto ball](images/penguins-quarto-ball.png){fig-align="left"}
```

![](images/penguins-quarto-ball.png)
:::

::: {.column width="50%"}
```         
![](images/penguins-quarto-ball.png){fig-align="right" fig-alt="Illustration of two penguins playing with a Quarto ball."}
```

![](images/penguins-quarto-ball.png){fig-align="right" fig-alt="Illustration of two penguins playing with a Quarto ball."}
:::
:::::

## Subfigures

**Markdown:**

```         
::: {#fig-penguins layout-ncol=2}

![Blue penguin](images/blue-penguin.png){#fig-blue width="250px"}

![Orange penguin](images/orange-penguin.png){#fig-orange width="250px"}

Two penguins

:::
```

## Subfigures

**Output:**

::: {#fig-penguins layout-ncol="2"}
![Blue penguin](images/blue-penguin.png){#fig-blue width="250px"}

![Orange penguin](images/orange-penguin.png){#fig-sleep width="250px"}

Two penguins
:::

## Figure divs

**Markdown:**

``` code
::: {#fig-penguin}

<iframe width="560" height="315" src="https://www.youtube.com/embed/q3uXXh1sHcI"></iframe>

Baby penguin tries to make friends
:::
```

## Figure divs

**Output:**

::: {#fig-penguin-youtube}
<iframe width="560" height="315" src="https://www.youtube.com/embed/q3uXXh1sHcI">

</iframe>

Baby penguin tries to make friends
:::

::: {.callout-note appearance="minimal"}
Last paragraph in the div block is used as the figure caption.
:::

## Finding the figures to include

In places like markdown, YAML, or the command line/shell/terminal, you'll need to use **absolute** or **relative** file paths:

. . .

-   Absolute = BAD: `"/Users/mine/quarto-asa-nebraska"` - Whose computer will this work on?

. . .

-   Relative = BETTER:

    -   `"../` = up one directory, `../../` = up two directories, etc.
    -   `/..` or `/` = start from `root` directory of your current computer

## Figures from code

```{python}
#| fig-width: 6
#| fig-asp: 0.618
#| echo: fenced

import plotnine as p9

(
  p9.ggplot(penguins, p9.aes(x = "species", fill = "species")) 
  + p9.geom_bar(show_legend = None)
)
```

# Cross references

## Cross references

-   Help readers to navigate your document with numbered references and hyperlinks to entities like figures and tables.

-   Cross referencing steps:

    -   Add a caption to your figure or table.
    -   Give an id to your figure or table, starting with `fig-` or `tbl-`.
    -   Refer to it with `@fig-...` or `@tbl-...`.

## Figure cross references {.smaller}

The presence of the caption (`Blue penguin`) and label (`#fig-blue-penguin`) make this figure referenceable:

::::: columns
::: {.column width="50%"}
**Markdown:**

``` markdown
See @fig-blue-penguin for a cute blue penguin.
![Blue penguin](images/blue-penguin.png){#fig-blue-penguin}
```
:::

::: {.column width="50%"}
**Output:**

See @fig-blue-penguin for a cute blue penguin.

![Blue penguin](images/blue-penguin.png){#fig-blue-penguin fig-alt="A blue penguin" width="200"}
:::
:::::

## Table cross references {.smaller}

The presence of the caption (`A few penguins`) and label (`#tbl-penguins`) make this table referenceable:

::::: columns
::: {.column width="50%"}
**Markdown:**

```` markdown
See @tbl-penguins for data on a few penguins.

```{{python}}
#| label: tbl-penguins
#| tbl-cap: A few penguins

gt.GT(penguins.head())
```
````
:::

::: {.column width="50%"}
**Output:**

See @tbl-penguins for data on a few penguins.

```{python}
#| label: tbl-penguins
#| tbl-cap: A few penguins

gt.GT(penguins.head())
```
:::
:::::

## Your turn

::: task
-   Open `tables-figures.qmd`.
-   Follow the instructions in the document, then exchange one new thing you've learned with your neighbor.
:::

::: {.timer seconds="600" starton="slide"}
:::

# Wrap up

## Questions

::: task
Any questions / anything you'd like to review before we wrap up this module?
:::