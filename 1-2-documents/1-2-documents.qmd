---
title: "Documents"
subtitle: "SciPy 2024: Unlocking Dynamic Reproducible Documents<br>A Quarto Tutorial for Scientific Communication"
author: "Mine Ã‡etinkaya Rundel"
institute: "Duke University + Posit PBC"
footer: "ðŸ”— [bit.ly/quarto-scipy24](https://bit.ly/quarto-scipy24)"
format:
  revealjs:
    output-file: 1-2-documents-reveal.html
    transition: fade
    slide-number: true
    chalkboard: true
    logo: ../images/quarto-scipy24-slide-logo.png
    theme: ../style/slides.scss
filters: 
  - countdown
execute:
  freeze: auto
  echo: true
---

# Anatomy of a Quarto document

## Components

1.  Metadata: YAML

2.  Text: Markdown

3.  Code: Executed via `jupyter` (or `knitr`)

. . .

**Weave it all together**, and you have beautiful, powerful, and useful outputs!

## Literate programming {.smaller}

Literate programming is writing out the program logic in a human language with included (separated by a primitive markup) code snippets and macros.

````{.markdown code-line-numbers="|7|9-29"}
---
title: plotnine demo
date: 7/8/2024
format: html
---

There is a relationship between flipper length and body mass.

```{{python}}
#| label: fig-penguins
import plotnine as p9
from palmerpenguins import load_penguins

penguins = load_penguins()

(
    p9.ggplot(
        penguins, 
        p9.aes(x = "flipper_length_mm", y = "body_mass_g")
    )
    + p9.geom_point()
    + p9.stat_smooth(method="lm")
    + p9.labs(
        x = "Flipper length (mm)", 
        y = "Body mass (g)", 
        title = "Body mass vs. flipper length of Palmer Penguins"
    )
)
```
````

::: aside
Source: <https://en.wikipedia.org/wiki/Literate_programming>
:::

# Metadata

## YAML

"Yet Another Markup Language" or "YAML Ain't Markup Language" is used to provide document level metadata.

```yaml
---
key: value
---
```

## Output options

```yaml
---
format: something
---
```

. . .

<br>

```yaml
---
format: html
---
```

```yaml
---
format: pdf
---
```

```yaml
---
format: revealjs
---
```

## Output option arguments

Indentation matters!

```yaml
---
format: 
  html:
    toc: true
    code-fold: true
---
```

## YAML validation {.smaller}

-   Invalid: No space after `:`

```yaml
---
format:html
---
```

-   Invalid: Read as missing

```yaml
---
format:
html
---
```

-   Valid, but needs next object

```yaml
---
format: 
  html:
---
```

## YAML validation {.smaller}

There are multiple ways of formatting valid YAML:

-   Valid: There's a space after `:`

```yaml
format: html
```

-   Valid: There are 2 spaces a new line and no trailing `:`

```yaml
format:
  html
```

-   Valid: `format: html` with selections made with proper indentation

```yaml
format: 
  html:
    toc: true
```

## Why YAML?

To avoid manually typing out all the options, every time when rendering via the CLI:

. . .

- Define format

```bash
quarto render document.qmd --to html
```

<br>

. . .

- Define format and format options

```bash
quarto render document.qmd --to html -M code-fold:true
```

<br>

. . .

- Define format, format options, and values for parameters

```bash
quarto render document.qmd --to html -M code-fold:true -P alpha:0.2 -P ratio:0.3
```

## Quarto linting

Lint, or a linter, is a static code analysis tool used to flag programming errors, bugs, stylistic errors and suspicious constructs.

<br>

::::: columns
::: {.column width="50%"}
![](images/lint-vscode-1.png)
:::

::: {.column width="50%"}
![](images/lint-vscode-2.png)
:::
:::::

::: aside
Source: <https://en.wikipedia.org/wiki/Lint_(software)>
:::

## Quarto YAML Intelligence

VS Code provides rich tab-completion - start a word and tab to complete, or <kbd>`Ctrl + space`</kbd> to see all available options.

<br>

![](images/quarto-tab-complete.png){fig-align="center" width="600"}

## Your turn

::: your-turn
-   Open `hello-penguins.qmd` in VS Code.
-   Try <kbd>`Ctrl + space`</kbd> to see the available YAML options.
-   Try out the tab-completion of any options you remember or use the HTML reference (<https://quarto.org/docs/reference/formats/html.html>) as needed.
:::

{{< countdown minutes=3 >}}

## List of valid YAML fields

-   Many YAML fields are common across various outputs

-   But also each output type has its own set of valid YAML fields and options

-   Definitive list: [quarto.org/docs/reference/formats/html](https://quarto.org/docs/reference/formats/html.html)

<iframe width="1000" height="450" src="https://quarto.org/docs/reference/formats/html.html"></iframe>

# Text

## TL;DR

<br><br>

::: hand
Pretty much everything you know about markdown formatting works with Quarto
:::

## Text Formatting

+-------------------------------+-------------------------------+
| Markdown syntax:              | Output:                       |
+===============================+===============================+
| ```                           | *italics* and **bold**        |
| *italics* and **bold**        |                               |
| ```                           |                               |
+-------------------------------+-------------------------------+
| ```                           | superscript^2^ / subscript~2~ |
| superscript^2^ / subscript~2~ |                               |
| ```                           |                               |
+-------------------------------+-------------------------------+
| ```                           | ~~strikethrough~~             |
| ~~strikethrough~~             |                               |
| ```                           |                               |
+-------------------------------+-------------------------------+
| ```                           | `verbatim code`               |
| `verbatim code`               |                               |
| ```                           |                               |
+-------------------------------+-------------------------------+

: {tbl-colwidths="\[50,50\]"}

## Headings {.smaller}

+-----------------+-----------------+
| Markdown syntax:| Output:         |
+=================+=================+
| ```             | # Header 1      |
| # Header 1      |                 |
| ```             |                 |
+-----------------+-----------------+
| ```             | ## Header 2     |
| ## Header 2     |                 |
| ```             |                 |
+-----------------+-----------------+
| ```             | ### Header 3    |
| ### Header 3    |                 |
| ```             |                 |
+-----------------+-----------------+
| ```             | #### Header 4   |
| #### Header 4   |                 |
| ```             |                 |
+-----------------+-----------------+
| ```             | ##### Header 5  |
| ##### Header 5  |                 |
| ```             |                 |
+-----------------+-----------------+
| ```             | ###### Header 6 |
| ###### Header 6 |                 |
| ```             |                 |
+-----------------+-----------------+

: {tbl-colwidths="\[50,50\]"}

## Links {.smaller}

Several types of links / hyperlinks:

::::: columns
::: {.column .fragment width="60%"}
**Markdown syntax:**

```markdown
{{< include _links.qmd >}}
```
:::

::: {.column .fragment width="40%"}
**Output:**

{{< include _links.qmd >}}
:::
:::::

## Lists {.smaller}

Unordered lists:

::::: columns
::: {.column .fragment width="50%" fragment-index="1"}
**Markdown syntax:**

```markdown
{{< include _unordered-lists.qmd >}}
```
:::

::: {.column .fragment width="50%" fragment-index="2"}
**Output:**

{{< include _unordered-lists.qmd >}}
:::
:::::

Ordered lists:

::::: columns
::: {.column .fragment width="50%" fragment-index="3"}
**Markdown syntax:**

```markdown
{{< include _ordered-lists.qmd >}}
```
:::

::: {.column .fragment width="50%" fragment-index="4"}
**Output:**

{{< include _ordered-lists.qmd >}}
:::
:::::

## Quotes {.smaller}

:::: columns
::: {.column .fragment width="50%"}
**Markdown syntax:**

```markdown
{{< include _quotes.qmd >}}
```
:::
::: {.column .fragment width="50%"}
**Output:**

{{< include _quotes.qmd >}}
:::
::::

::: aside
"Literate Programming", The Computer Journal 27 (1984), p. 97. (Reprinted in Literate Programming, 1992, p. 99.) Literate Programming (1984)
:::

## Divs

Pandoc, and therefore Quarto, can parse [fenced div blocks](https://pandoc.org/MANUAL.html#divs-and-spans):

You can think of a `:::` **div** as a HTML `<div>` but it can also apply in specific situations to content in PDF or other formats:

:::: columns
::: {.column .fragment width="50%"}
**Markdown syntax:**

```markdown
{{< include _divs.qmd >}}
```
:::
::: {.column .fragment width="50%"}
**Output:**

{{< include _divs.qmd >}}
:::
::::

## Divs with pre-defined classes

These can often apply between formats:

```markdown
::: {.unnumbered .unlisted}
Text
:::
```

## Spans

`[text]{.class}` **span**s can be thought of a `<span .class>Text</span>`, but again are a bit more transferable if using Pandoc/Quarto native attributes.

:::: columns
::: {.column .fragment width="50%"}
**Markdown syntax:**

```markdown
{{< include _spans.qmd >}}
```
:::
::: {.column .fragment width="50%"}
**Output:**

{{< include _spans.qmd >}}
:::
::::

## Your turn

::: your-turn
-   Open `markdown-syntax.qmd` in VS Code.
-   Follow the instructions in the document, then exchange one new thing you've learned with your neighbor.
:::

{{< countdown minutes=5 >}}

## Callouts

:::: columns
::: {.column .fragment width="50%"}
**Markdown syntax:**

```markdown        
{{< include _callouts.qmd >}}
```
:::
::: {.column .fragment width="50%"}
**Output:**

{{< include _callouts.qmd >}}
:::
::::

## More callouts

::: callout-warning
Callouts provide a simple way to attract attention, for example, to this warning.
:::

::: callout-important
This is important! Callouts will really improve your writing.
:::

::: callout-caution
Here is something under construction.
:::

::: callout-tip
## Caption

Tip with caption.
:::

## Your turn

::: your-turn
-   Open `callout-boxes.qmd` and render the document.
-   Using the visual editor, change the type of the first callouts box and then re-render. Also play with the options to change its appearance.
-   Add a caption to the second callout box.
-   Make the third callout box collapsible. Then, switch over to the source editor to inspect the markdown code.
-   Change the format to PDF and re-render.
:::

{{< countdown minutes=3 >}}

## Footnotes

- Pandoc supports numbering and formatting footnotes.

- In Quarto, the footnote is placed at the bottom of the slide in presentations, whereas in a document it's hoverable or at the end of the document.

## Inline footnotes

:::: columns
::: {.column .fragment width="50%"}
**Markdown syntax:**

```markdown        
{{< include _inline-footnotes.qmd >}}
```
:::
::: {.column .fragment width="50%"}
**Output:**

{{< include _inline-footnotes.qmd >}}
:::
::::

## Numbered footnotes

:::: columns
::: {.column .fragment width="50%"}
**Markdown syntax:**
```markdown        
{{< include _numbered-footnotes.qmd >}}
```
:::
::: {.column .fragment width="50%"}
**Output:**
{{< include _numbered-footnotes.qmd >}}
:::
::::

# Code

## Anatomy of a code chunk

::::: columns
::: {.column width="50%"}
```{python}
#| label: penguins
#| message: false
#| echo: fenced

import pandas as pd
from palmerpenguins import load_penguins

penguins = load_penguins()

penguins["species"].unique()
```
:::

::: {.column .fragment width="50%"}
-   Has 3x backticks on each end
-   Engine (`python`) is indicated between curly braces `{python}`
-   Options stated with the `#|` (hashpipe): `#| option1: value`
:::
:::::

## Code, who is it for?

::: incremental
-   The way you display code is very different for different contexts.
-   In a teaching scenario like today, I *really* want to display code.
-   In a business, you may want to have a data-science facing output which displays the source code AND a stakeholder-facing output which hides the code.
:::

## Code

If you simply want code formatting but don't want to execute the code:

-   Option 1: Use 3x back ticks + the language ```` ```python ````

````         
```python
penguins.head()
```
````

. . .

-   Option 2: Add `eval: false` as chunk option

```{python}
#| eval: false
#| echo: fenced
penguins.head()
```

## Showing and hiding code with `echo`

-   The `echo` option shows the code when set to `true` and hides it when set to `false`.

-   If you want to both execute the code and return the full code including backticks (like in a teaching scenario) `echo: fenced` is your friend!

```{python}
#| echo: fenced

1 + 1
```

## Tables and figures

-   In reproducible reports and manuscripts, the most commonly included code outputs are **tables** and **figures**.

-   So they get their own special sections in our deep dive!

# Tables

## Markdown tables

**Markdown syntax:**

```markdown
{{< include _tables-markdown.qmd >}}
```

**Output:**

{{< include _tables-markdown.qmd >}}

## Grid tables

**Markdown syntax:**

```markdown
{{< include _tables-grid.qmd >}}
```

**Output:**

{{< include _tables-grid.qmd >}}

## Grid tables: Alignment

-   Alignments can be specified as with pipe tables, by putting colons at the boundaries of the separator line after the header:

```markdown       
+---------------+---------------+--------------------+
| Right         | Left          | Centered           |
+==============:+:==============+:==================:+
| Bananas       | $1.34         | built-in wrapper   |
+---------------+---------------+--------------------+
```

. . .

-   For headerless tables, the colons go on the top line instead:

```markdown       
+--------------:+:--------------+:------------------:+
| Right         | Left          | Centered           |
+---------------+---------------+--------------------+
```

## Grid tables: Authoring

-   Note that grid tables are quite awkward to write with a plain text editor because unlike pipe tables, the column indicators must align.

-   The Visual Editor can assist in making these tables!

## Tables from code {.smaller}

If you are using pandas to work with your data, you can convert a pandas DataFrame to an HTML table using the `DataFrame.to_html()` method:

::: {.scrolling}
```{python}
penguins.to_html(index=False)
```
:::

## Tables from code {.smaller}

If you want fancier tables, try the **great_tables** package and [all that it offers](https://posit-dev.github.io/great-tables/)!

```{python}
#| output-location: column-fragment

import great_tables as gt

(
    gt.GT(penguins.head())
    .tab_style(
        style = [
            gt.style.fill(color = "pink"),
            gt.style.text(weight = "italic")
        ],
        locations = gt.loc.body(
          columns= "bill_length_mm",
          rows = lambda x: x["bill_length_mm"] > 40
        )
    )
)
```

# Figures

## Markdown figures

**Markdown syntax:**

```markdown
{{< include _figures.qmd >}}
```

**Output:**

{{< include _figures.qmd >}}

## Markdown figures with options

**Markdown syntax:**

```markdown
{{< include _figures-align-left.qmd >}}
```

**Output:**

{{< include _figures-align-left.qmd >}}

## Markdown figures with options

**Markdown syntax:**

```markdown
{{< include _figures-alt-resize.qmd >}}
```

**Output:**

{{< include _figures-alt-resize.qmd >}}

## Subfigures

**Markdown syntax:**

```markdown      
{{< include _subfigures.qmd >}}
```

**Output:**

{{< include _subfigures.qmd >}}

## Figure divs

**Markdown syntax:**

```markdown
{{< include _figures-divs.qmd >}}
```

**Output:**

{{< include _figures-divs.qmd >}}

## Figures from code

```{python}
#| fig-width: 6
#| fig-asp: 0.618
#| echo: fenced
import plotnine as p9

(
  p9.ggplot(penguins, p9.aes(x = "species", fill = "species")) 
  + p9.geom_bar(show_legend = None)
)
```

# Cross references

## Cross references

-   Help readers to navigate your document with numbered references and hyperlinks to entities like figures and tables.

-   Cross referencing steps:

    -   Add a caption to your figure or table.
    -   Give an id to your figure or table, starting with `fig-` or `tbl-`.
    -   Refer to it with `@fig-...` or `@tbl-...`.

## Figure cross references

The presence of the caption (`Blue penguin`) and label (`#fig-blue-penguin`) make this figure referenceable:

**Markdown syntax:**

```markdown
{{< include _figures-cross-refs.qmd >}}
```

**Output:**

{{< include _figures-cross-refs.qmd >}}

## Table cross references

The presence of the caption (`A few penguins`) and label (`#tbl-penguins`) make this table referenceable:

**Markdown syntax:**

````markdown
See @tbl-penguins for data on a few penguins.

```{{python}}
#| label: tbl-penguins
#| tbl-cap: A few penguins
gt.GT(penguins.head())
```
````

**Output:**

See @tbl-penguins for data on a few penguins.

```{python}
#| label: tbl-penguins
#| tbl-cap: A few penguins
gt.GT(penguins.head())
```

## Your turn

::: your-turn
-   Open `tables-figures.qmd`.
-   Follow the instructions in the document, then exchange one new thing you've learned with your neighbor.
:::

{{< countdown minutes=10 >}}

# Wrap up

## Learn more

::: {.center-align .large}
[quarto.org/docs/guide](https://quarto.org/docs/guide/>) > Documents
:::

```{=html}
<iframe src="https://quarto.org/docs/guide" width="100%" height="500" style="border:2px solid #123233;" title="Quarto Guide"></iframe>
```

## Questions

::: your-turn
Any questions / anything you'd like to review before we wrap up this module?
:::
