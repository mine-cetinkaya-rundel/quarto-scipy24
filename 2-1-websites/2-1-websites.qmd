---
title: "Websites and blogs"
subtitle: "SciPy 2024: Unlocking Dynamic Reproducible Documents<br>A Quarto Tutorial for Scientific Communication"
author: "Mine Ã‡etinkaya Rundel"
institute: "Duke University + Posit PBC"
footer: "ðŸ”— [bit.ly/quarto-scipy24](https://bit.ly/quarto-scipy24)"
format:
  revealjs:
    output-file: 2-1-websites-reveal.html
    transition: fade
    slide-number: true
    chalkboard: true
    logo: ../images/quarto-scipy24-slide-logo.png
    theme: ../style/slides.scss
filters: 
  - countdown
execute:
  freeze: auto
  echo: true
---

# Anatomy of a Quarto project

## Quarto projects

-   Quarto projects have a `_quarto.yml` file

-   The `type` field in this file indicates the type of project:

    -   `default`: Collection of documents

    -   `website`: Websites (and blogs)

    -   `books`: Books

    -   `manuscript`: Journal manuscript with embedded computing and JATS bundle

## Components

::: r-fit-text
> [A Quarto Project is a directory]{.fragment} [that contains a file called `_quarto.yml`.]{.fragment}
:::

\

::::: columns
::: {.column .fragment .fade-right width="50%"}
This is a Quarto Project.

```         
my-folder/
â”œâ”€â”€ _quarto.yml
â”œâ”€â”€ my-document.ipynb
```
:::

::: {.column .fragment .fade-left width="50%"}
This is not.

```         
my-folder/
â”œâ”€â”€ my-document.ipynb
```
:::
:::::

## \_quarto.yml {auto-animate="true"}

A YAML file with particular keys and values that Quarto recognizes. Unrecognized keys are ignored.

``` {.yaml .fragment filename="_quarto.yml"}
project:
  title: "A Barebones Project"
```

## \_quarto.yml {auto-animate="true"}

A YAML file with particular keys and values that Quarto recognizes. Unrecognized keys are ignored.

``` {.yaml filename="_quarto.yml" code-line-numbers="|31-53|71-73"}
project:
  type: website
  output-dir: docs

website:
  page-navigation: true
  title: "Unlocking Dynamic Reproducible Documents"
  description: "A Quarto Tutorial for Scientific Communication on Quarto at SciPy 2024"

  repo-url: https://github.com/mine-cetinkaya-rundel/quarto-scipy24
  repo-actions: [edit, issue]

  open-graph: true

  sidebar:
    background: "#D1D9E3"
    logo: "images/quarto-scipy24-site-logo.png"
    pinned: true
    align: center
    tools:
      - icon: github
        href: https://github.com/mine-cetinkaya-rundel/quarto-scipy24
        text: GitHub repo
      - icon: code-square
        href: https://code.visualstudio.com/
        text: VS Code

    style: docked
    search: true
    collapse-level: 2
    contents:
      - href: index.qmd
        text: Home
      - href: setup.qmd
        text: Setup
      - section: Part 1
        contents:
          - href: 1-1-hello/index.qmd
            text: Hello
          - href: 1-2-documents/index.qmd
            text: Documents
          - href: 1-3-presentations/index.qmd
            text: Presentations
          - href: 1-4-dashboards/index.qmd
            text: Dashboards
      - section: Part 2
        contents:
          - href: 2-1-websites/index.qmd
            text: Websites and blogs
          - href: 2-2-books/index.qmd
            text: Books
          - href: 2-3-manuscripts/index.qmd
            text: Manuscripts

  page-footer:
    right: "This page is built with ðŸ’š and [Quarto](https://quarto.org/)."
    left: "&copy; Copyright 2024, Mine Ã‡etinkaya-Rundel"
    background: "#D1D9E3" # Arylide Yellow

format:
  html:
    theme:
      light: [cosmo, style/quarto-scipy24.scss]
      dark: [cosmo, style/quarto-scipy24.scss, style/dark.scss]
    linkcolor: "#58779b"
    toc: true
    code-copy: true
    code-overflow: wrap
    mainfont: "Atkinson Hyperlegible"

execute:
  freeze: auto
  echo: true
```

## Quarto websites

::: incremental
-   Websites are essentially `format: html` + a Quarto Project file

-   But a website is different than `format: html` in that it has multiple pages

-   Websites and books are very similar in that they associate multiple pages/resources into a connected resource

    -   In books, you can cross-reference between pages (chapters), but (currently), you can't cross-reference between pages in websites
:::


## Our turn

::: our-turn
Let's build a website that features a few of the notebooks we worked on and highlight the following features of Quarto websites:

-   Add a `_quarto.yml`
-   Create a landing page: `index.qmd`
-   Explore navigation options: `navbar`, `sidebar`
-   Apply themes, including a light and dark theme toggle
-   Publish to QuartoPub with `quarto publish`
-   An aspect of the workshop webpage that you fancy?
:::

## Your turn

::: your-turn
-   Add one more notebook that has at least one executable code cell and add it to the navigation list in `_quarto.yml` and render your site.
-   Add an [about page](https://quarto.org/docs/websites/website-about.html), `about.qmd`, personalize it, and add it to the navigation list in `_quarto.yml` and render your site.
-   Re-publish on QuartoPub with `quarto publish`.
:::

{{< countdown minutes=10 >}}

# Listings

## Listings

-   Listings enable you to automatically generate the contents of a page (or region of a page) from a list of Quarto documents or other custom data

-   Useful for creating blogs, providing navigation for large numbers of documents, or any other scenario where youâ€™d like the contents of a page to be automatically updated as documents are added, updated, and removed

## Blogs

::: our-turn
Let's now add a blog component to our website:

-   Move two of your notebook files into a new a folder called `posts`.
-   Collect these notebooks in a new blog page using the [listings feature](https://quarto.org/docs/websites/website-listings.html).
    -   Don't forget to make corresponding changes in your `_quarto.yml` file.
-   Experiment with the style of listings and choose one you like.
:::

# Computations

## When should code be re-run?

::: incremental
-   You might have a reason to re-run all code in a Quarto website (every single cell in every single document) every time you render the website.

-   But, chances are, that's not what you want.

    -   Just playing around styling -- you probably don't want to run the code again

    -   Changed some code in a document -- you probably want to re-run the code in that document, but not necessarily others

    -   Made a big change affecting computations on many or all pages -- you probably want to re-run all code

-   `freeze` and `cache` options give you fine control over these decisions
:::

## Freeze

-   The `freeze` option controls when/if computational documents be re-rendered during a global project render:

``` yaml
execute:
  freeze: true  # never re-render during project render
```

``` yaml
execute:
  freeze: auto  # re-render only when source changes
```

``` yaml
execute:
  freeze: false  # always re-render
```

-   The `freeze` option is typically added to a `_metadata.yml` file within a specific directory, affecting all files in that directory.

-   For blogs, set `feeze` in `_metadata.yml` at the root of the `posts` directory.

-   You can have it only within specific subdirectories for more complex sites.

## Freeze and Jupyter notebooks

-   When rendering an `.ipynb`, Quarto will not execute the cells within the notebook by default, assuming that you have already executed them while editing the notebook

-   To execute the cells, pass the `--execute` flag to render:

``` {.bash filename="Terminal"}
quarto render notebook.ipynb --execute
```

-   Or specify this behavior within the notebookâ€™s YAML front matter:

``` yaml
---
execute:
  enabled: true
---
```

## Cache

-   Cache stores the results of computations for a specific file

-   Cache invalidation is triggered by changes in chunk source code (or other cache attributes you've defined)

-   `cache` can also be set at the chunk level, particularly useful for computationally expensive chunks

## Freeze vs. cache

-   Freeze option is typically set

    -   for the whole website in `_quarto.yml`, or

    -   for files within a directory in `_metadata.yml` in that directory

``` yaml
execute: 
  freeze: auto
```

-   Cache option is typically set for a given file or for individual chunk(s) in a file.

``` yaml
execute:
  cache: true
```

or

```{python}
#| echo: fenced
#| cache: true

1 + 1
```

# Publishing

## QuartoPub

-   [Quarto Pub](https://quartopub.com/) is a free publishing service for content created with Quarto. It is ideal for blogs, course or project websites, books, presentations, and personal hobby sites.

-   Publish with `quarto publish`:

``` {.bash filename="Terminal"}
quarto publish quarto-pub
```

-   Gain a `_publish.yml` that is safe to check into version control.

## Other venues

-   GitHub Pages
-   Posit Connect
-   Netlify
-   [More venues](https://quarto.org/docs/publishing/other.html)

# Wrap up

## Learn more

::: {.center-align .large}
[quarto.org/docs/websites](https://quarto.org/docs/websites/>)
:::

```{=html}
<iframe src="https://quarto.org/docs/websites" width="100%" height="500" style="border:2px solid #123233;" title="Quarto Websites"></iframe>
```

## Questions

::: your-turn
Any questions / anything you'd like to review before we wrap up this module?
:::
